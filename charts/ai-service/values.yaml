replicaCount: 1

rollingUpdate:
  maxSurge: 1
  maxUnavailable: 0

# -- The image to use for this specific deployment and its cron jobs
image:
  # -- Repository, where the Unique service image is pulled from
  # - for Unique internal deployments, these is the internal release repository
  # - for client deployments, this will refer to the client's repository where the images have been mirrored too
  # Note that it is bad practice and not advised to directly pull from Uniques release repository
  # Read in the readme on why the helm chart comes bundled with the unique-ag/chart-testing-service image
  repository: "ghcr.io/unique-ag/chart-testing-service"
  # -- tag, most often will refer one of the latest release of the Unique service
  # Read in the readme on why the helm chart comes bundled with the unique-ag/chart-testing-service image
  tag: "1.0.2"
  # -- pullPolicy, Unique recommends to never use 'Always'
  pullPolicy: IfNotPresent
imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  enabled: false
  annotations: {}
  # name: ""
  workloadIdentity: {}

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 8081

ingress:
  enabled: false
  tls:
    enabled: false

env: {}

# Names of existing config maps to be used as env vars (configMapRef in envFrom)
extraEnvCM: []

envSecrets: {}

# Names of existing secrets to be used as env vars (secretRef in envFrom)
extraEnvSecrets: []

probes:
  enabled: false
  liveness:
    httpGet:
      path: /probe
      port: http
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 6
  readiness:
    httpGet:
      path: /probe
      port: http
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 6
  startup:
    httpGet:
      path: /probe
      port: http
    initialDelaySeconds: 10
    failureThreshold: 30
    periodSeconds: 10

pdb:
  maxUnavailable: 30%

# -- Configuration for Persistent Volume Claim
pvc:
  # -- Enable persistent volume claim
  enabled: false
  # -- Storage size for PVC
  storage: 32Gi
  # -- Name of the PVC, defaults to the fullname of the deployment
  # name: my-volume
  # -- Storage class name for PVC
  storageClassName: azurefile
  # -- Access mode for PVC. Possible values: ReadWriteOnce, ReadOnlyMany, ReadWriteMany
  accessMode: ReadWriteMany

# -- Configuration for artifacts cache, see the readme above for examples and details.
# Only use the cache if you want to actively download artifacts. Else use the `pvc` section.
artifactsCache:
  # -- Enable artifacts cache PVC
  enabled: false
  # -- Storage size for artifacts cache
  storage: "32Gi"
  # -- Storage class name for artifacts cache
  storageClassName: "azurefile"
  # -- By secure default, the artifacts cache is read only, allows writes if needed
  readOnly: true
  # -- Access modes for artifacts cache. Possible values: ReadWriteOnce, ReadOnlyMany, ReadWriteMany
  accessModes:
    - ReadWriteMany
  # -- List of artifacts to download
  # -- artifactsCache.artifacts[].blobUrl URL of the blob to download
  # -- artifactsCache.artifacts[].path Path where to store the downloaded artifact
  artifacts: []
  # -- Configuration for the artifacts downloader init container
  downloader:
    # -- Image to use for the artifacts downloader init container
    image: "curlimages/curl:8.12.0"
    # -- This option explicitly allows curl to perform "insecure" SSL connections and transfers, equals curl -k or --insecure
    insecure: false

resources: {}

autoscaling:
  enabled: false
  minReplicas: 0
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

eventBasedAutoscaling:
  enabled: true
  minReplicaCount: 0
  maxReplicaCount: 8
  cron:
    timezone: Europe/Zurich
    start: 0 8 * * 1-5
    end: 0 19 * * 1-5
    desiredReplicas: "1"
  rabbitmq:
    protocol: auto
    queueName: ""
    mode: QueueLength
    value: "1"
    hostFromEnv: AMQP_URL
  customTriggers: []

nodeSelector: {}

tolerations: []

affinity: {}

volumeMounts: []

volumes: []

terminationGracePeriodSeconds: 3600

lifecycle:
  preStop:
    httpGet:
      path: can_shutdown
      port: 8081

# !!! usePodIdentity will be deprecated in the future please use useVMManagedIdentity with the clientID
# .Values.secretProvider lets you mount secrets from Azure Key Vault into the pod
# Note that 'vault-1' is the literal vault name from azure
# The line format is 'make <ENV>: from <KEY_VAULT_SECRET_NAME>'
# The conversion from - to _ is done automatically
secretProvider: {}
# Example
# secretProvider:
#   tenantId: 99330c76-81d2-460e-861e-35af8e2a4266
#   aadPodIdBinding: binding-21 # optional, defaults to 'keyvault'
#   useVMManagedIdentity: "true" # optional, if not present usePodIdentity is set to "true" useVMManagedIdentity to "false"
#   userAssignedIdentityID: "xx-pls-provide-client-id-xx"   # Should not be empty if useVMManagedIdentity is present and has the value "true"
#   vaults:
#     vault-name-1:
#       MY_ENV_VARIABLE_1: keyvault-secret-name-a
#     vault-name-2:
#       MY_ENV_VARIABLE_2: keyvault-secret-name-b

deployment: {}
# deployment:
# initContainers:
# - name: model-downloader
#   image: python:3.9
#   command:
#     - sh
#     - -c
#     - |
#       pip install huggingface-hub transformers;
#       huggingface-cli download bert-base-uncased --cache-dir /models/bert;
#       if [ -f /models/bert/pytorch_model.bin ]; then
#         echo "Model downloaded successfully";
#       else
#         echo "Model download failed";
#         exit 1;
#       fi;
#   volumeMounts:
#     - name: models-storage
#       mountPath: /models
#       readOnly: false
#       emptyDir: false
