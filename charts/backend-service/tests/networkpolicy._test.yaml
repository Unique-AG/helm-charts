# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Test NetworkPolicy
templates:
  - networkpolicy.yaml
  - networkpolicy-cilium.yaml
release:
  name: ut
tests:
  - it: When networkPolicy is disabled, should not render any NetworkPolicy
    set:
      networkPolicy.enabled: false
    asserts:
      - hasDocuments:
          count: 0

  - it: When networkPolicy is enabled with kubernetes flavor, should render NetworkPolicy with correct metadata
    set:
      networkPolicy.enabled: true
      networkPolicy.flavor: kubernetes
      networkPolicy.labels:
        environment: test
        team: platform
      networkPolicy.annotations:
        description: "Test network policy"
    template: networkpolicy.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: NetworkPolicy
      - equal:
          path: metadata.name
          value: ut
      - equal:
          path: metadata.namespace
          value: NAMESPACE
      - isNotNullOrEmpty:
          path: metadata.labels
      - equal:
          path: metadata.labels.environment
          value: test
      - equal:
          path: metadata.labels.team
          value: platform

  - it: When networkPolicy is enabled with default values, should render basic NetworkPolicy
    set:
      networkPolicy.enabled: true
    template: networkpolicy.yaml
    asserts:
      - isKind:
          of: NetworkPolicy
      - equal:
          path: spec.podSelector.matchLabels["app.kubernetes.io/name"]
          value: ut
      - equal:
          path: spec.podSelector.matchLabels["app.kubernetes.io/instance"]
          value: ut
      - equal:
          path: spec.podSelector.matchLabels["app.kubernetes.io/component"]
          value: server
      - isNotNullOrEmpty:
          path: spec.ingress
      - isNotNullOrEmpty:
          path: spec.egress

  - it: When networkPolicy is enabled with custom policyTypes, should render only specified types
    set:
      networkPolicy.enabled: true
      networkPolicy.policyTypes:
        - Ingress
    template: networkpolicy.yaml
    asserts:
      - isKind:
          of: NetworkPolicy
      - contains:
          path: spec.policyTypes
          content: Ingress
      - notContains:
          path: spec.policyTypes
          content: Egress
      - lengthEqual:
          path: spec.policyTypes
          count: 1

  - it: When networkPolicy is enabled with custom ingress rules, should render them correctly
    set:
      networkPolicy.enabled: true
      networkPolicy.ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  name: monitoring
          ports:
            - protocol: TCP
              port: 8080
        - from:
            - podSelector:
                matchLabels:
                  app: frontend
          ports:
            - protocol: TCP
              port: 80
    template: networkpolicy.yaml
    asserts:
      - isKind:
          of: NetworkPolicy
      - lengthEqual:
          path: spec.ingress
          count: 2
      - equal:
          path: spec.ingress[0].from[0].namespaceSelector.matchLabels.name
          value: monitoring
      - equal:
          path: spec.ingress[0].ports[0].protocol
          value: TCP
      - equal:
          path: spec.ingress[0].ports[0].port
          value: 8080
      - equal:
          path: spec.ingress[1].from[0].podSelector.matchLabels.app
          value: frontend
      - equal:
          path: spec.ingress[1].ports[0].port
          value: 80

  - it: When networkPolicy is enabled with custom egress rules, should render them correctly
    set:
      networkPolicy.enabled: true
      networkPolicy.egress:
        - to:
            - namespaceSelector:
                matchLabels:
                  name: database
          ports:
            - protocol: TCP
              port: 5432
        - to: []
          ports:
            - protocol: TCP
              port: 443
            - protocol: TCP
              port: 80
        - to: []
          ports:
            - protocol: UDP
              port: 53
    template: networkpolicy.yaml
    asserts:
      - isKind:
          of: NetworkPolicy
      - lengthEqual:
          path: spec.egress
          count: 3
      - equal:
          path: spec.egress[0].to[0].namespaceSelector.matchLabels.name
          value: database
      - equal:
          path: spec.egress[0].ports[0].protocol
          value: TCP
      - equal:
          path: spec.egress[0].ports[0].port
          value: 5432
      - isEmpty:
          path: spec.egress[1].to
      - lengthEqual:
          path: spec.egress[1].ports
          count: 2
      - equal:
          path: spec.egress[1].ports[0].port
          value: 443
      - equal:
          path: spec.egress[1].ports[1].port
          value: 80
      - equal:
          path: spec.egress[2].ports[0].protocol
          value: UDP
      - equal:
          path: spec.egress[2].ports[0].port
          value: 53

  - it: When networkPolicy is enabled with comprehensive config, should render all settings
    values:
      - ../ci/networkpolicy-values.yaml
    template: networkpolicy.yaml
    asserts:
      - isKind:
          of: NetworkPolicy
      - equal:
          path: metadata.name
          value: ut-test
      - equal:
          path: metadata.labels.environment
          value: test
      - equal:
          path: metadata.labels.team
          value: platform
      - lengthEqual:
          path: spec.ingress
          count: 2
      - lengthEqual:
          path: spec.egress
          count: 3
      - equal:
          path: spec.podSelector.matchLabels["app.kubernetes.io/name"]
          value: test
      - equal:
          path: spec.podSelector.matchLabels["app.kubernetes.io/instance"]
          value: ut
      - equal:
          path: spec.podSelector.matchLabels["app.kubernetes.io/component"]
          value: server

  - it: When networkPolicy is enabled with only ingress rules, should not render egress section
    set:
      networkPolicy.enabled: true
      networkPolicy.policyTypes:
        - Ingress
      networkPolicy.ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  name: monitoring
          ports:
            - protocol: TCP
              port: 8080
    template: networkpolicy.yaml
    asserts:
      - isKind:
          of: NetworkPolicy
      - isNotNullOrEmpty:
          path: spec.ingress
      - isNotNullOrEmpty:
          path: spec.egress

  - it: When networkPolicy is enabled with only egress rules, should not render ingress section
    set:
      networkPolicy.enabled: true
      networkPolicy.policyTypes:
        - Egress
      networkPolicy.egress:
        - to:
            - namespaceSelector:
                matchLabels:
                  name: database
          ports:
            - protocol: TCP
              port: 5432
    template: networkpolicy.yaml
    asserts:
      - isKind:
          of: NetworkPolicy
      - isNotNullOrEmpty:
          path: spec.ingress
      - isNotNullOrEmpty:
          path: spec.egress

  - it: When networkPolicy is enabled with nameOverride, should use correct name
    set:
      nameOverride: custom-name
      networkPolicy.enabled: true
    template: networkpolicy.yaml
    asserts:
      - isKind:
          of: NetworkPolicy
      - equal:
          path: metadata.name
          value: ut-custom-name
      - equal:
          path: spec.podSelector.matchLabels["app.kubernetes.io/name"]
          value: custom-name

  - it: When networkPolicy is enabled with fullnameOverride, should use correct name
    set:
      fullnameOverride: full-custom-name
      networkPolicy.enabled: true
    template: networkpolicy.yaml
    asserts:
      - isKind:
          of: NetworkPolicy
      - equal:
          path: metadata.name
          value: full-custom-name
      - equal:
          path: spec.podSelector.matchLabels["app.kubernetes.io/name"]
          value: ut

  - it: When networkPolicy flavor is cilium, should render CiliumNetworkPolicy
    set:
      networkPolicy.enabled: true
      networkPolicy.flavor: cilium
    template: networkpolicy-cilium.yaml
    capabilities:
      apiVersions:
        - cilium.io/v2
    asserts:
      - isKind:
          of: CiliumNetworkPolicy
      - equal:
          path: apiVersion
          value: cilium.io/v2
      - equal:
          path: spec.endpointSelector.matchLabels["app.kubernetes.io/name"]
          value: ut
      - equal:
          path: spec.endpointSelector.matchLabels["app.kubernetes.io/instance"]
          value: ut
      - equal:
          path: spec.endpointSelector.matchLabels["app.kubernetes.io/component"]
          value: server
      - notExists:
          path: spec.policyTypes

  - it: When networkPolicy flavor is kubernetes, should render standard NetworkPolicy
    set:
      networkPolicy.enabled: true
      networkPolicy.flavor: kubernetes
    template: networkpolicy.yaml
    asserts:
      - isKind:
          of: NetworkPolicy
      - equal:
          path: apiVersion
          value: networking.k8s.io/v1
      - equal:
          path: spec.podSelector.matchLabels["app.kubernetes.io/name"]
          value: ut

  - it: When networkPolicy flavor is cilium with comprehensive config, should render CiliumNetworkPolicy correctly
    values:
      - ../ci/networkpolicy-cilium-values.yaml
    template: networkpolicy-cilium.yaml
    capabilities:
      apiVersions:
        - cilium.io/v2
    asserts:
      - isKind:
          of: CiliumNetworkPolicy
      - equal:
          path: apiVersion
          value: cilium.io/v2
      - equal:
          path: metadata.name
          value: ut-cilium-test
      - equal:
          path: metadata.labels.environment
          value: test
      - equal:
          path: metadata.labels.team
          value: platform
      - equal:
          path: metadata.labels.flavor
          value: cilium
      - lengthEqual:
          path: spec.ingress
          count: 2
      - lengthEqual:
          path: spec.egress
          count: 3
      - equal:
          path: spec.endpointSelector.matchLabels["app.kubernetes.io/name"]
          value: cilium-test
      - equal:
          path: spec.endpointSelector.matchLabels["app.kubernetes.io/instance"]
          value: ut
      - equal:
          path: spec.endpointSelector.matchLabels["app.kubernetes.io/component"]
          value: server
      - notExists:
          path: spec.policyTypes

  - it: When networkPolicy flavor is cilium with custom ingress rules, should render them correctly
    set:
      networkPolicy.enabled: true
      networkPolicy.flavor: cilium
      networkPolicy.ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  name: monitoring
          ports:
            - protocol: TCP
              port: 8080
    template: networkpolicy-cilium.yaml
    capabilities:
      apiVersions:
        - cilium.io/v2
    asserts:
      - isKind:
          of: CiliumNetworkPolicy
      - equal:
          path: spec.ingress[0].from[0].namespaceSelector.matchLabels.name
          value: monitoring
      - equal:
          path: spec.ingress[0].ports[0].protocol
          value: TCP
      - equal:
          path: spec.ingress[0].ports[0].port
          value: 8080

  - it: When networkPolicy flavor is not specified, should default to kubernetes
    set:
      networkPolicy.enabled: true
    template: networkpolicy.yaml
    asserts:
      - isKind:
          of: NetworkPolicy
      - equal:
          path: apiVersion
          value: networking.k8s.io/v1
      - equal:
          path: spec.podSelector.matchLabels["app.kubernetes.io/name"]
          value: ut

  - it: When networkPolicy flavor is cilium, should not render kubernetes template
    set:
      networkPolicy.enabled: true
      networkPolicy.flavor: cilium
    template: networkpolicy.yaml
    capabilities:
      apiVersions:
        - cilium.io/v2
    asserts:
      - hasDocuments:
          count: 0

  - it: When networkPolicy flavor is kubernetes, should not render cilium template
    set:
      networkPolicy.enabled: true
      networkPolicy.flavor: kubernetes
    template: networkpolicy-cilium.yaml
    capabilities:
      apiVersions:
        - cilium.io/v2
    asserts:
      - hasDocuments:
          count: 0
