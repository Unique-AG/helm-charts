# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Regression Test Deployment
templates:
  - configmap-env.yaml
  - secret-env.yaml
  - deployment.yaml
release:
  name: ut
tests:
  - it: When given a secretsProvider, should always render volumeMounts and volumes for them
    set:
      image.tag: pinned-version
      secretsProvider.enabled: true
      secretsProvider.azure.tenantId: 99330c76-81d2-460e-861e-35af8e2a4266
      secretsProvider.azure.workloadIdentity.clientId: test-client-id
      secretsProvider.azure.keyVaults:
        - name: qa-app-common
          secrets:
            - name: AMQP_URL
              key: RABBITMQ-ORANGE-WOLF-URL

    template: deployment.yaml
    asserts:
      - isKind:
          of: Deployment
      - isNotNullOrEmpty:
          path: spec.template.spec.volumes[?(@.name == "secrets-store-qa-app-common")]
      - isNotNullOrEmpty:
          path: spec.template.spec.containers[?(@.name == "ut-backend-service")].volumeMounts[?(@.name == "secrets-store-qa-app-common")]

  - it: When given initContainers in deployment
    set:
      image.tag: pinned-version
      initContainers[0].name: test-init
      initContainers[0].image: busybox
      initContainers[0].command:
        - "sh"
        - "-c"
        - "echo helloWorld"
    template: deployment.yaml
    asserts:
      - isKind:
          of: Deployment
      - isNotNullOrEmpty:
          path: spec.template.spec.initContainers[0]
      - isNotNullOrEmpty:
          path: spec.template.spec.initContainers[?(@.name == "test-init")]

  - it: When given envVars, renders them to the PodSpec
    set:
      image.tag: pinned-version
      envVars:
        - name: NAME_OF_ENV
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: ENV_VALUE
    template: deployment.yaml
    asserts:
      - isKind:
          of: Deployment
      - isNotNullOrEmpty:
          path: spec.template.spec.containers[?(@.name == "ut-backend-service")].env[?(@.name == "NAME_OF_ENV")]
      - contains:
          path: spec.template.spec.containers[?(@.name == "ut-backend-service")].env
          content:
            name: NAME_OF_ENV
            valueFrom:
              secretKeyRef:
                key: ENV_VALUE
                name: my-secret
          count: 1
          any: true

  - it: When given env and envSecrets, should render ConfigMap and Secret
    set:
      image.tag: pinned-version
      env.TEST_VAR: test-value
      envSecrets.SECRET_VAR: secret-value
    template: configmap-env.yaml
    asserts:
      - isKind:
          of: ConfigMap
      - equal:
          path: data.TEST_VAR
          value: test-value

  - it: When given envSecrets, should render Secret
    set:
      image.tag: pinned-version
      envSecrets.SECRET_VAR: secret-value
    template: secret-env.yaml
    asserts:
      - isKind:
          of: Secret
      - isNotNullOrEmpty:
          path: data.SECRET_VAR

  - it: When given a keda block, should not set replicas
    set:
      keda:
        enabled: true
        minReplicaCount: 0
        maxReplicaCount: 4
        scalers:
          - type: rabbitmq
            metadata:
              protocol: amqp
              queueName: example.queue
              mode: QueueLength
              value: "1"

    template: deployment.yaml
    asserts:
      - isKind:
          of: Deployment
      - notExists:
          path: spec.replicas

  - it: When given pod labels and annotations
    set:
      image.tag: pinned-version
      podLabels.app: test
      podAnnotations.test: true
    template: deployment.yaml
    asserts:
      - isKind:
          of: Deployment
      - isNotNullOrEmpty:
          path: spec.template.metadata.labels.app
      - isNotNullOrEmpty:
          path: spec.template.metadata.annotations.test
      - equal:
          path: spec.template.metadata.labels.app
          value: test
      - equal:
          path: spec.template.metadata.annotations.test
          value: true

  - it: When given sidecars, should render them in the deployment
    set:
      image.tag: pinned-version
      sidecars:
        - name: sidecar-container
          image: nginx:latest
          ports:
            - containerPort: 80
    template: deployment.yaml
    asserts:
      - isKind:
          of: Deployment
      - isNotNullOrEmpty:
          path: spec.template.spec.containers[?(@.name == "sidecar-container")]
      - equal:
          path: spec.template.spec.containers[?(@.name == "sidecar-container")].image
          value: nginx:latest
