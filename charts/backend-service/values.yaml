nameOverride: ""
fullnameOverride: ""
replicaCount: 1

affinity: {}

auditVolume:
  enabled: false
  mountPath: /audit # defaults to /audit
  capacity: 1Ti # defaults to 1Ti
  attributes:
    resourceGroup: my-azure-resource-group
    storageAccount: my-azure-storage-account
    # containerName: my-azure-container-in-my-azure-storage-account # defaults to release name

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# clusterInternalServiceSuffix allows to override the default ".svc.cluster.local" service address suffix which is used to reach internal services in the cluster.
# Note: It must start with a dot.
# clusterInternalServiceSuffix: .domain.local

# -- cronJob allows you to define a cronJob that mostly bases on the general values.
# Note that since chart version 1.4.0 it is recommended to use preferably extraCronJobs (see readme for more information)
cronJob:
  concurrencyPolicy: Allow
  enabled: false
  env: {}
  failedJobsHistoryLimit: 1
  jobTemplate:
    containers:
      name: ''
    restartPolicy: OnFailure
  name: ''
  schedule: ''
  startingDeadlineSeconds: 60
  successfulJobsHistoryLimit: 1
  suspend: false
  timeZone: Europe/Zurich

# -- deployment is the deployed application
# since this chart allows to also deploy as a CronJob or both, all deployment related values are in this section
deployment:
  enabled: true
  # metadata:
  #   labels:
  #     app: backend-service
  #   annotations:
  #     prometheus: "true"
  # initContainers:
  #   - command:
  #       - sh
  #       - -c
  #       - export MY_VARIABLE="some_value" && sleep 1
  #     volumeMounts:
  #       - name: data
  #         mountPath: /opt
  #         mountPathDeployment: /opt/folder
  #         readOnly: true

# env is a flat map of ENV_NAME: $VALUE which will get encapsulated into a ConfigMap and loaded using the envFrom syntax
# It only supports the flat object syntax with key value pairs
env: {}

# envSecrets is a map of ENV_NAME: $SECRET_VALUE which will get encapsulated into a Secret and loaded using the envFrom syntax
envSecrets: {}

# envVars is a list of ENV_NAME: $VALUE which will be added to the pods where the $VALUE supports the same syntax as the native pod spec
# https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
envVars: []

# -- eventBasedAutoscaling allows you to define a event based autoscaling policy for the chart
# ⚠️ `eventBasedAutoscaling` is deprecated. Use `keda` instead.
eventBasedAutoscaling:
  enabled: false
  minReplicaCount: 0
  maxReplicaCount: 2
  cron:
    timezone: Europe/Zurich
    start: 0 8 * * 1-5
    end: 0 19 * * 1-5
    desiredReplicas: "1"
  rabbitmq:
    protocol: auto
    # queueName: ""
    mode: QueueLength
    value: "1"
    hostFromEnv: AMQP_URL
  customTriggers: []

externalSecrets:
  []
  # - keyvaultName: my-keyvault
  #   keyvaultURL: "https://my-keyvault:8989" # private keyvault
  #   identityId: "xxx-xxxxxx-xxx-xxxx"
  #   tenantId: "yyyy-yyy-yyyy-yyyy-yy"
  #   secrets:
  #     - name: golden-secret
  #       type: Opaque
  #       metadata:
  #         labels:
  #           app: my-app
  #           environment: production
  #         annotations:
  #           description: "This secret created by external-secrets.io from kv my-keyvault "
  #       data:
  #         - objectName: my-secret-in-kv-1
  #           key: my-secret-in-kv-1

  #         - objectName: my-secret-in-kv-2
  #           key: my-secret-in-kv-2

# extraEnvCM is a list of existing ConfigMaps to be loaded using the envFrom syntax
extraEnvCM: []

# extraEnvSecrets is a list of existing Secrets to be loaded using the envFrom syntax
extraEnvSecrets: []

# -- extraObjects allows you to add additional Kubernetes objects to the manifest. It is the responsibility of the user to ensure that the objects are valid, that they do not conflict with the existing objects and that they are not containing any sensitive information
extraObjects: []

# -- BETA: Configure additional gateway routes for the chart here.
# More routes can be added by adding a dictionary key like the 'extra-route-1' route.
# In order for this to install, the Gateway [API CRDs](https://gateway-api.sigs.k8s.io/guides/#getting-started-with-gateway-api) must be installed in the cluster.
extraRoutes:
  extra-route-1:
    # -- Enables or disables the route
    enabled: false
    # -- Set the route apiVersion, e.g. gateway.networking.k8s.io/v1 or gateway.networking.k8s.io/v1alpha2
    apiVersion: gateway.networking.k8s.io/v1
    # -- Set the route kind
    # Valid options are GRPCRoute, HTTPRoute, TCPRoute, TLSRoute, UDPRoute
    kind: HTTPRoute
    # -- Set the route annotations
    annotations: {}
    # -- Set the route labels
    labels: {}
    # -- Add hostnames to the route, will be matched against the host header of the request
    hostnames: []
    # -- parentRefs define the parent gateway(s) that the route will be associated with
    parentRefs:
      - name: kong
        namespace: kong-system
        group: gateway.networking.k8s.io
        kind: Gateway
    # -- which match conditions should be applied to the route
    matches:
      - path:
          type: PathPrefix
          value: /
    ## -- Filters define the filters that are applied to requests that match this rule.
    filters: []
    ## -- Additional custom rules that can be added to the route
    additionalRules: []

# -- extraCronJobs allows you to define additional cron jobs besides 'cronJob' itself.
extraCronJobs: {}
  #   - foo
  #   suspend: false
  #   schedule: "0 0 1 1 *"
  #   timeZone: "Europe/Zurich"
  #   concurrencyPolicy: Forbid
  #   restartPolicy: Never
  #   successfulJobsHistoryLimit: 3
  #   failedJobsHistoryLimit: 3
  #   startingDeadlineSeconds: 10
  #   envVars:
  #     - name: RUNNING_MODE
  #       value: "bar"

hooks:
  migration:
    enabled: false
    # name: "" defaults to db-migration
    command: ""
    # initContainers:
    #   - command:
    #       - sh
    #       - -c
    #       - export MY_VARIABLE="some_value" && sleep 1
    #     volumeMounts:
    #       - name: data
    #         mountPath: /opt
    #         mountPathJob: /opt/folder
    #         readOnly: true

# -- networkPolicy allows you to define network policies for the deployed pods
# Network policies are used to control traffic flow to and from pods
networkPolicy:
  # -- Enable or disable network policy creation
  enabled: false
  # -- Network policy flavor - "kubernetes" for standard NetworkPolicy or "cilium" for CiliumNetworkPolicy
  flavor: kubernetes
  # -- Policy types to apply (Ingress, Egress, or both)
  # policyTypes:
  #   - Ingress
  #   - Egress
  # -- Description of the network policy (Cilium only)
  # description: "Network policy for backend service"
  # -- Enable default deny for all traffic (Cilium only)
  # enableDefaultDeny:
  #   ingress: true
  #   egress: true
  # -- Labels to be applied to the network policy spec (Cilium only)
  # labels:
  #   component: backend
  #   tier: application
  # -- Labels to be applied to the network policy spec (Cilium only)
  # ciliumPolicylabels:
  #   - key: component
  #     value: backend
  #   - key: tier
  #     value: application
  # -- Ingress rules configuration
  ingress:
    # -- Default ingress rules applied to all pods
    # Allow ingress from pods in the same namespace
    - from:
        - podSelector: {}
    # Example ingress rules:
    # - from:
    #     - namespaceSelector:
    #         matchLabels:
    #           name: monitoring
    #   ports:
    #     - protocol: TCP
    #       port: 8080
    # - from:
    #     - podSelector:
    #         matchLabels:
    #           app: frontend
    #   ports:
    #     - protocol: TCP
    #       port: 8080
  # -- Ingress deny rules configuration (Cilium only)
  # ingressDeny:
  #   - from:
  #       - podSelector:
  #           matchLabels:
  #             app: untrusted
  # -- Egress rules configuration
  egress:
    # -- Default egress rules applied to all pods
    # Allow egress to pods in the same namespace
    - to:
        - podSelector: {}
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
    # Example egress rules:
    # - to:
    #     - namespaceSelector:
    #         matchLabels:
    #           name: database
    #   ports:
    #     - protocol: TCP
    #       port: 5432
    # - to: []
    #   ports:
    #     - protocol: TCP
    #       port: 443
    #     - protocol: TCP
    #       port: 80
  # -- Egress deny rules configuration (Cilium only)
  # egressDeny:
  #   - to:
  #       - namespaceSelector:
  #           matchLabels:
  #             name: restricted
  # -- Additional labels to add to the network policy
  labels: {}
  # -- Additional annotations to add to the network policy
  annotations: {}

# -- The image to use for this specific deployment and its cron jobs
image:
  # -- Repository, where the Unique service image is pulled from
  # - for Unique internal deployments, these is the internal release repository
  # - for client deployments, this will refer to the client's repository where the images have been mirrored too
  # Note that it is bad practice and not advised to directly pull from Uniques release repository
  # Read in the readme on why the helm chart comes bundled with the unique-ag/chart-testing-service image
  repository: "ghcr.io/unique-ag/chart-testing-service"
  # -- tag, most often will refer one of the latest release of the Unique service
  # Read in the readme on why the helm chart comes bundled with the unique-ag/chart-testing-service image
  tag: "1.0.3"
  # -- pullPolicy, Unique recommends to never use 'Always'
  pullPolicy: IfNotPresent

imagePullSecrets: []

# -- keda allows you to enable KEDA for the chart
# `keda` and `eventBasedAutoscaling` are mutually exclusive.
keda:
  # -- enable KEDA/ScaledObject for the chart
  enabled: false
  # -- pause the ScaledObject
  paused: false
  # -- extra annotations for the ScaledObject
  extraAnnotations: {}
  # -- polling interval for the ScaledObject
  pollingInterval: 30
  # -- cooldown period for the ScaledObject
  cooldownPeriod: 300
  # -- idle replica count for the ScaledObject
  # Due to limitations in HPA controller, the only supported value is 0.
  # See: https://keda.sh/docs/2.14/concepts/scaling-deployments/#idlereplicacount
  # When not set, maintains at least minReplicaCount replicas even when idle.
  # idleReplicaCount: 0
  # -- min replica count for the ScaledObject
  minReplicaCount: 1
  # -- max replica count for the ScaledObject
  maxReplicaCount: 4
  # -- scalers for the ScaledObject
  # You can specify multiple scalers for the ScaledObject as outlined in https://keda.sh/docs/2.14/scalers/
  scalers: []
    # # -- rabbitmq example
    # - type: rabbitmq
    #   metadata:
    #     protocol: amqp
    #     queueName: testqueue
    #     mode: QueueLength
    #     value: "20"
    #   # -- authenticationRef for the ScaledObject
    #   # Note that the TriggerAuthentication resource must be created separately
    #   authenticationRef:
    #     name: keda-trigger-auth-rabbitmq-conn
    # # -- cron example
    # - type: cron
    #   metadata:
    #     # -- The acceptable values would be a value from the IANA Time Zone Database.
    #     timezone: Europe/Zurich
    #     start: 0 6 * * *
    #     end: 0 20 * * *
    #     # -- desired replicas for the ScaledObject
    #     desiredReplicas: "10"

pdb:
  maxUnavailable: 30%

# -- Define additional pod annotations for all the pods
podAnnotations: {}

# -- Define additional pod labels for all the pods
podLabels: {}

# -- PodSecurityContext for the pod(s)
podSecurityContext:
  # -- seccompProfile, controls the seccomp profile for the container, defaults to 'RuntimeDefault'
  seccompProfile:
    ## -- type, the type of seccomp profile to use, defaults to 'RuntimeDefault'
    type: RuntimeDefault

# -- the ports section allows specify ports used for different purposes
ports:
  # -- application port, this is the port that the deployed Unique application listens on
  # ℹ You may not be able to use ports below 1024 as non-root user which is the default securityContext of this chart
  # If you need to use a port below 1024, you can override the securityContext of the deployment (discouraged) or get the `NET_BIND_SERVICE` capability added to the container (also discouraged but preferred if absolutely needed, at your own risk/liability)
  application: 8080
  # -- service port, this is the port that the service will be exposed on
  # ⚠️ This is not applied to `tyk` objects as tyk is getting sunset, for Tyk, always service.port|80 is used
  service: 80

probes:
  enabled: true
  liveness:
    httpGet:
      path: /probe
      port: http
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 6
  readiness:
    httpGet:
      path: /probe
      port: http
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 6
  startup:
    httpGet:
      path: /probe
      port: http
    initialDelaySeconds: 10
    failureThreshold: 30
    periodSeconds: 10

nodeSelector: {}

prometheus:
  enabled: false
  # enabled: true
  # team: <team-name> # defines alert routing
  # rules:
  #   QNodeChat5xx:
  #     expression: >
  #       sum(
  #         max_over_time(
  #           nestjs_http_server_responses_total{status=~"^5..$", app="node_chat"}[1m]
  #         )
  #         or
  #         vector(0)
  #       )
  #         by (app, path, method, status)
  #       -
  #       sum(
  #         max_over_time(
  #           nestjs_http_server_responses_total{status=~"^5..$", app="node_chat"}[1m]
  #           offset 1m
  #         )
  #         or vector(0)
  #       )
  #         by (app, path, method, status)
  #       > 0
  #     for: 0m
  #     severity: critical
  #     # Left side are alert labels, right side are the metrics labels ($labels.*)
  #     labels:
  #       app: app
  #       path: path
  #       method: method
  #       status: status

resources: {}

rollingUpdate:
  maxSurge: 1
  maxUnavailable: 0

# -- routes is a special object designed for Unique services. It abstracts a lot of complexity and allows for a simple configuration of routes.
# ⚠️ Unique defaults to Kong as its API Gateway (the middlewares especially), and the routes object is designed to work with Kong (but might work with other implementations as well). If you are using a different API Gateway, you will need to change the `gateway details` or use `extraRoutes`.
# Refer to [`ci/routes-values.yaml`](https://github.com/Unique-AG/helm-charts/blob/main/charts/backend-service/ci/routes-values.yaml) to see a full example of how to configure routes.
# Currently, routes must be explicitly enabled until the Unique Kong migration is complete.
routes:
  # - hostname of the route, will be matched against the host header of the request
  # currently defaults to one, if ever more are needed open an issue, `extraHostNames` will be added, supports templating
  hostname: chart-testing-service.example.com
  # -- gateway to use
  gateway:
    # -- name of the gateway
    # @default -- kong
    name: kong
    # -- namespace of the gateway
    # @default -- system
    namespace: system
  # -- pathPrefix allows setting the default prefix (fullname) for all paths
  # @default -- defaults to /fullname of the service
  pathPrefix: ""
  paths:
    default:
      enabled: false
      # -- explicitly list paths to block
      blockList:
        - /metrics
      extraAnnotations: []
        # konghq.com/request-buffering: "false"
        # konghq.com/read-timeout: "120s"
    versioned:
      enabled: false
      # -- users wishing to not call their versioned API 'public' can override the path
      # ⚠️ Customizing this value requires also changing the default url in multiple places including all SDK or integration use cases
      # @default -- the chart will default to 'public' to stay backward compatible
      pathOverride: /public
      extraAnnotations: []
        # konghq.com/request-buffering: "false"
    scoped:
      enabled: false
      # -- users wishing to not call their scoped API 'scoped' can override the path
      # ⚠️ Customizing this value requires also changing the default url in multiple places including all web-apps
      # @default -- the chart will default to 'scoped' to stay backward compatible
      pathOverride: /scoped
      # -- explicitly list of exact path matches
      # Only exact path matches are supported to ensure strict security
      # will be rendered to: `/{scoped|pathOverride}/{entry}`
      allowList:
        - /upload
      extraAnnotations: []
      #   konghq.com/request-buffering: "false"
    # -- `/probe` is unauthorized and its sole purpose is to expose a health check endpoint for availability monitoring
    # Maps to version neutral `/probe` endpoint all Unique services expose
    probe:
      enabled: false
      # -- path to the probe endpoint
      probePath: /probe
      extraAnnotations: []
        # konghq.com/strip-path: "true"

# !!! usePodIdentity will be deprecated in the future please use useVMManagedIdentity with the clientID
# .Values.secretProvider lets you mount secrets from Azure Key Vault into the pod
# Note that 'vault-1' is the literal vault name from azure
# The line format is 'make <ENV>: from <KEY_VAULT_SECRET_NAME>'
# The conversion from - to _ is done automatically
secretProvider: {}
# Example
# secretProvider:
#   tenantId: 99330c76-81d2-460e-861e-35af8e2a4266
#   aadPodIdBinding: binding-21 # optional, defaults to 'keyvault'
#   useVMManagedIdentity: "true" # optional, if not present usePodIdentity is set to "true" useVMManagedIdentity to "false"
#   userAssignedIdentityID: "xx-pls-provide-client-id-xx"   # Should not be empty if useVMManagedIdentity is present and has the value "true"
#   vaults:
#     vault-name-1:
#       MY_ENV_VARIABLE_1: keyvault-secret-name-a
#     vault-name-2:
#       MY_ENV_VARIABLE_2: keyvault-secret-name-b

# -- securityContext for the container(s)
securityContext:
  # -- AllowPrivilegeEscalation, controls if the container can gain more privileges than its parent process, defaults to 'false'
  allowPrivilegeEscalation: false
  # -- readOnlyRootFilesystem, controls if the container has a read-only root filesystem, defaults to 'true'
  readOnlyRootFilesystem: true
  # -- runAsNonRoot, controls if the container must run as a non-root user, defaults to 'true'
  runAsNonRoot: true
  # -- runAsUser, controls the user ID that runs the container, defaults to '1000'
  runAsUser: 1000
  # -- capabilities section controls the Linux capabilities for the container
  capabilities:
    drop:
    - ALL

service:
  enabled: true
  type: ClusterIP
  port: 80
  # -- extraLabels allows you to add additional labels to the service e.g. {"foo": "bar"}
  extraLabels: {}

serviceAccount:
  enabled: false
  annotations: {}
  # name: ""
  workloadIdentity: {}

tolerations: []

# -- Settings for Tyk API Gateway respectively its APIDefinition, in order to use Tyk API Gateway, you must install its Operators respective CRDs.
# ⚠️ Since `2.0.0` this is no longer enabled by default. Unique will slowly migrate away from Tyk API Gateway and into `routes` and `extraRoutes`, refer to the readme.
# ␡ `tyk` will be removed from the chart latest with an upcoming major release.
tyk:
  enabled: false
  # -- ⚠️ When using Tyk API Gateway, you must set a valid listenPath
  listenPath: "/unsert_default_path"
  jwtSource: https://id.unique.app/oauth/v2/keys
  rateLimit:
    {}
    # Limit per interval, example values are default values
    # Rate limit can not be disabled fully only increased, we learned some lessons 🩸
    # rate: 20 # requests to the key
    # per: 60 # each minute (faster a human can not type)
    # Quota per longer section
    # quotaMax: 15000 # 500 chats per day for 30 days, generous as we are for now
    # quotaRenewalRate: 2592000 # 30 days in seconds
    # If quota or limit gets hit, what happens
    # throttleInterval: -1 # for now we do not throttle
    # throttleRetryLimit: -1 # for now we do not throttle
  # hardTimeouts allows you to increase/decrease timeouts for specific paths
  # hardTimeouts:
  #   - path: "/longer"
  #     method: "GET"
  #     timeoutSeconds: 1000
  exposePublicApi:
    enabled: false
    # appRepositoryUrlOverride: "" # defaults to http://node-app-repository.namespace.svc.cluster.local
    # appRepositoryPortOverride: "" # defaults to 8088
    # appRepositoryNamespaceOverride: "" # defaults to apps
    # publicPathOverride: "" # defaults to '/public'
    # hardTimeouts:
    #   - path: "/longer"
    #     method: "GET"
    #     timeoutSeconds: 1000
  # defaultTimeout: 30 # This setting is only to be modified after consulting the platform team. Disagreed changes will be reverted unquestioned.
  scopedApi:
    enabled: false
    # scopedPathOverride: "" # defaults to '/scoped'
    # hardTimeouts:
    #   - path: "/longer"
    #     method: "GET"
    #     timeoutSeconds: 1000
  # defaultTimeout: 30 # This setting is only to be modified after consulting the platform team. Disagreed changes will be reverted unquestioned.

  # -- blockList allows you to block specific paths and methods
  blockList:
    - methods:
        - GET
      path: /metrics

volumeMounts: []

volumes: []
